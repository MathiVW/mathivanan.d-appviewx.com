<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_avx_appviewx_aut.appviewx_test_connection</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>appviewx_test_connection</name>
        <script><![CDATA[var appviewx_test_connection = Class.create();
appviewx_test_connection.prototype = {
	initialize: function() {},
	TestConnection: function() {
		try {
			
			gs.info("Testing AppViewX Gateway API connection from ServiceNow");
			var r = new sn_ws.RESTMessageV2();
			var url = gs.getProperty("x_avx_appviewx_aut.AppViewX URL");
			var username = gs.getProperty("x_avx_appviewx_aut.Username");
			var password = gs.getProperty("x_avx_appviewx_aut.Password");
			var payload = "{\"payload\":{}}";
			r.setEndpoint(url+":5300/avxapi/acctmgmt-perform-login?gwkey=f000ca01&gwsource=web");
			r.setHttpMethod("post");
			r.setRequestHeader("username", username);
			r.setRequestHeader("password", password);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(payload);
			r.setHttpTimeout(100);
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_test_connection';
				gr.application = 'AppViewX';
				gr.message = 'Triggerring a test connection between Servicenow and AppViewX';
				gr.insert();
			var response = r.executeAsync();
			var status  = response.getStatusCode();
			var responseBody;
			if (status == 200) {
				responseBody = response.getBody();
				var data =  JSON.parse(responseBody);
				if (data["response"]["status"] == "SUCCESS"){
					gr.message = 'Connection test result - Success ';
					gr.insert();
					gs.info("Response status code " + status);
					gs.info("Server rechability test result:  SUCCESS");
					gs.info("Connection test result:  SUCCESS ");
				}
				else {
					gr.message = 'Connection test result - Failed \n'+ 'Response - ' + data[response];
					gr.insert();
					gs.info("Connection test result:  " + data["response"]["statusDescription"]+ " ");
					gs.info("Connection test result:  Failed ");
				}
			}
			else {
				var responseMessage = response.getErrorMessage();
				responseBody = response.getBody();
				gs.info('Test response - ' + responseBody + '\n' + responseMessage);
				gr.message = 'Connection test result - Failed \n'+ 'Possible Error : AppViewX Server might not Reachable or Block through a Firewall or AppviewX Instance details are not filled under "Properties" menu' ;
				gr.insert();
				gs.info("Response status code: " + status);
				gs.info("Possible error : AppViewX Server not Reachable or Connections blocked through a Firewall ");
				gs.info("Connection test result:  FAILED ");
			}
			} 
		catch (exe) {
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_test_connection';
				gr.application = 'AppViewX';
				gr.message = 'Connection test result - Failed \n'+ 'Response - ' + exe;
				gr.insert();
			gs.error("AppViewX REST API test failed: " + exe);
		}
	}

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-12-26 11:46:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1368cfcc1b4644142369eb1cad4bcbc3</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>appviewx_test_connection</sys_name>
        <sys_package display_value="AppViewX Automation+" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX Automation+">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_1368cfcc1b4644142369eb1cad4bcbc3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-06-09 03:48:59</sys_updated_on>
    </sys_script_include>
</record_update>
