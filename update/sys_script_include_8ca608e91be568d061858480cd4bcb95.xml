<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_avx_appviewx_aut.appviewx_update_inventory</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>appviewx_update_inventory</name>
        <script><![CDATA[var appviewx_update_inventory = Class.create();
appviewx_update_inventory.prototype = {
    initialize: function() {},
	UpdateADCInventroy: function(){
		this._ADCInventory();
		this._OthersInventory();
		this._CertificateInventory();
		gs.log('Update Completed');
	},
	_ADCInventory: function() {
		try {
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_update_inventory';
				gr.application = 'AppViewX';
				gr.message = 'Getting List of Devices from AppViewX';
				gr.insert();
			var r = new sn_ws.RESTMessageV2();
			var url = gs.getProperty("x_avx_appviewx_aut.AppViewX URL");
			var username = gs.getProperty("x_avx_appviewx_aut.Username");
			var password = gs.getProperty("x_avx_appviewx_aut.Password");
			var payload = "{\"payload\":{}}";
			r.setHttpMethod("post");
			r.setRequestHeader("username", username);
			r.setRequestHeader("password", password);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(payload);
			r.setHttpTimeout(10000);
			r.setEndpoint(url+"/avxapi/adc-get-devices-by-filter?gwkey=f000ca01&gwsource=web");
			var response = r.executeAsync();
			var status  = response.getStatusCode();
			if (status == 200) {
				var grinv = new GlideRecord('x_avx_appviewx_aut_application_delivery_controller');
				var responseBody = response.getBody();
				var responsecontent =  JSON.parse(responseBody);
				gs.info('Updating ADC Inventory... Please wait...');
				var device = responsecontent.response.data;
				for(i = 0; i < device.length; i++){
					try {
						if(device[i].ip == ""){
							var ip = device[i].fqdn;
						}
						else{
							ip = device[i].ip;
						}
						grinv.initialize();
						var device_name = device[i].name;
						var modules;
						grinv.addQuery('device_name',device_name);
						grinv.query();
						if(grinv.getRowCount() > 0){
							while(grinv.next()){
							grinv.ip_address_fqdn = ip;
							grinv.device_name = device[i].name;
							modules = device[i].module;
							grinv.modules = modules.toString();
							grinv.vendor = device[i].vendor;
							grinv.version = device[i].version;
							grinv.status = device[i].status;
							grinv.update();
							}
						}
						else{
							grinv.ip_address_fqdn = ip;
							grinv.device_name = device[i].name;
							modules = device[i].module;
							grinv.modules = modules.toString();
							grinv.vendor = device[i].vendor;
							grinv.version = device[i].version;
							grinv.status = device[i].status;
							grinv.insert();
						}
						
					}
				catch (exe){
					gs.info(exe);
					}
				}
			}
			else {
				var responseMessage = response.getErrorMessage();
				responseBody = response.getBody();
				gs.info(responseBody);
			}
		}
		catch (exe) {
				gr.message = 'Update Inventory - Failed \n'+ 'Response - ' + exe;
				gr.insert();
				gs.info("Falied");
		}
	},
	_CertificateInventory: function() {
		try {
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_update_inventory';
				gr.application = 'AppViewX';
				gr.message = 'Getting List of Certificates from AppViewX';
				gr.insert();
			var r = new sn_ws.RESTMessageV2();
			var url = gs.getProperty("x_avx_appviewx_aut.AppViewX URL");
			var username = gs.getProperty("x_avx_appviewx_aut.Username");
			var password = gs.getProperty("x_avx_appviewx_aut.Password");
			var payload = "{\"payload\":{\"skip\":0,\"limit\":100,\"autoSuggest\":\"false\",\"sort\":{\"_id\":-1},\"category\":\"server\",\"userFilter\":null}}";
			r.setHttpMethod("post");
			r.setRequestHeader("username", username);
			r.setRequestHeader("password", password);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(payload);
			r.setHttpTimeout(10000);
			r.setEndpoint(url+"/avxapi/cert-server-certificate-inventory-list?gwkey=f000ca01&gwsource=web");
			var response = r.executeAsync();
			var status  = response.getStatusCode();
			if (status == 200) {
				var grinv = new GlideRecord('x_avx_appviewx_aut_certificates_inventory');
				var responseBody = response.getBody();
				var responsecontent =  JSON.parse(responseBody);
				var totalrecords = responsecontent.response.totalRecords;
				for(j = 0 ; j < totalrecords;){
					payload = "{\"payload\":{\"skip\":" + j + ",\"limit\":100,\"autoSuggest\":\"false\",\"sort\":{\"_id\":-1},\"category\":\"server\",\"userFilter\":null}}";
					r.setRequestBody(payload);
					response = r.executeAsync();
					status  = response.getStatusCode();
					gs.info('Updating Certificates Inventory... Please wait...');
					if (status == 200) {
						responseBody = response.getBody();
						responsecontent =  JSON.parse(responseBody);
						var certs = responsecontent.response.data;
						for(i = 0; i < certs.length; i++){
							try {
								grinv.initialize();
								var commonName = certs[i].commonName;
								var serialNumber = certs[i].serialNumber;
								var discoverySources;
								var expiry_date;
								var date;
								grinv.addQuery('common_name',commonName);
								grinv.addQuery('serial_number',serialNumber);
								grinv.query();
								if(grinv.getRowCount() > 0)	{
									while(grinv.next()) {
										grinv.common_name = certs[i].commonName;
										grinv.serial_number = certs[i].serialNumber;
										grinv.issuer_common_name = certs[i].issuerCommonName;
										grinv.status = certs[i].status;
										expiry_date = certs[i].validTo;
										date = new Date(expiry_date);
										grinv.expiry_date = date.toDateString();
										grinv.certificate_authority = certs[i].certificateAuthority;
										discoverySources = certs[i].discoverySources;
										grinv.source = discoverySources.toString();
										grinv.update();
									}
								}
	
								else {
										grinv.common_name = certs[i].commonName;
										grinv.serial_number = certs[i].serialNumber;
										grinv.issuer_common_name = certs[i].issuerCommonName;
										grinv.status = certs[i].status;
										expiry_date = certs[i].validTo;
										date = new Date(expiry_date);
										grinv.expiry_date = date.toDateString();
										grinv.certificate_authority = certs[i].certificateAuthority;
										discoverySources = certs[i].discoverySources;
										grinv.source = discoverySources.toString() ;
										grinv.insert();
								}
							}

							catch (exe){
								gs.info(exe);
									}
								}
							}
					else {
								var responseMessage = response.getErrorMessage();
								responseBody = response.getBody();
								gs.info(responseBody);
						}
					j = j + 100;
					}
				}
			else {
					responseMessage = response.getErrorMessage();
					responseBody = response.getBody();
					gs.info(responseBody);
			}
			
		}
		catch (exe) {
				gr.message = 'Update Inventory - Failed \n'+ 'Response - ' + exe;
				gr.insert();
				gs.info("Falied");
		}
	},
	
	_OthersInventory: function() {
		try {
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_update_inventory';
				gr.application = 'AppViewX';
				gr.message = 'Getting List of Other Devices from AppViewX';
				gr.insert();
			var r = new sn_ws.RESTMessageV2();
			var url = gs.getProperty("x_avx_appviewx_aut.AppViewX URL");
			var username = gs.getProperty("x_avx_appviewx_aut.Username");
			var password = gs.getProperty("x_avx_appviewx_aut.Password");
			var payload = "{\"payload\":{}}";
			r.setHttpMethod("post");
			r.setRequestHeader("username", username);
			r.setRequestHeader("password", password);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(payload);
			r.setHttpTimeout(10000);
			r.setEndpoint(url+"/avxapi/others-get-devices-by-filter?gwkey=f000ca01&gwsource=web");
			response = r.executeAsync();
			status  = response.getStatusCode();
			if (status == 200) {
				grinv = new GlideRecord('x_avx_appviewx_aut_other_devices');
				responseBody = response.getBody();
				responsecontent =  JSON.parse(responseBody);
				gs.info('Updating Other Devices Inventory... Please wait...');
				device = responsecontent.response.data;
				for(i = 0; i < device.length; i++){
					if (device[i].category == "Others"){
						try {
							grinv.initialize();
							var device_name = device[i].name;
							grinv.addQuery('device_name',device_name);
							grinv.query();
							if(grinv.getRowCount() > 0){
								while(grinv.next()){
									grinv.ip_addrerss_fqdn = device[i].ip;
									grinv.device_name = device[i].name;
									grinv.model = device[i].model;
									grinv.status = device[i].status;
									grinv.update();
								}
							}
							else{
								grinv.ip_addrerss_fqdn = device[i].ip;
								grinv.device_name = device[i].name;
								grinv.model = device[i].model;
								grinv.status = device[i].status;
								grinv.insert();

							}
						}
					catch (exe){
						gs.info(exe);
						}
					}
				}
			}
			else {
				responseMessage = response.getErrorMessage();
				responseBody = response.getBody();
				gs.info(responseBody);
			}
		}
		catch (exe) {
				gr.message = 'Update Inventory - Failed \n'+ 'Response - ' + exe;
				gr.insert();
				gs.info("Falied");
		}
	}
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-01-07 03:19:06</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8ca608e91be568d061858480cd4bcb95</sys_id>
        <sys_mod_count>63</sys_mod_count>
        <sys_name>appviewx_update_inventory</sys_name>
        <sys_package display_value="AppViewX Automation+" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX Automation+">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_8ca608e91be568d061858480cd4bcb95</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-03-08 16:21:31</sys_updated_on>
    </sys_script_include>
</record_update>
