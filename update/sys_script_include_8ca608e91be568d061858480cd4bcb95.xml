<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_avx_appviewx_aut.appviewx_update_inventory</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>appviewx_update_inventory</name>
        <script><![CDATA[var appviewx_update_inventory = Class.create();
appviewx_update_inventory.prototype = {
    initialize: function() {},
	UpdateADCInventory: function(){
		var update_inventory = gs.getProperty("x_avx_appviewx_aut.Sync Inventory");
		if(update_inventory == "true"){
			this._AdcInventory();
			this._OthersInventory();
			this._FwInventory();
			gs.info('Update Completed');
		}
		else{
			gs.info('Update Failed. Update inventory is set to False in Properties');
		}
	},
	_AdcInventory: function() {
		try {
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_update_inventory';
				gr.application = 'AppViewX';
				gr.message = 'Getting List of ADC Devices from AppViewX';
				gr.insert();
			var r = new sn_ws.RESTMessageV2();
			var url = gs.getProperty("x_avx_appviewx_aut.AppViewX URL");
			var username = gs.getProperty("x_avx_appviewx_aut.Username");
			var password = gs.getProperty("x_avx_appviewx_aut.Password");
			var payload = "{\"payload\":{}}";
			r.setHttpMethod("post");
			r.setRequestHeader("username", username);
			r.setRequestHeader("password", password);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(payload);
			r.setHttpTimeout(10000);
			r.setEndpoint(url+"/avxapi/adc-get-devices-by-filter?gwkey=f000ca01&gwsource=web");
			var response = r.executeAsync();
			var status  = response.getStatusCode();
			if (status == 200) {
				var grinv = new GlideRecord('x_avx_appviewx_aut_application_delivery_controllers');
				var responseBody = response.getBody();
				var responsecontent =  JSON.parse(responseBody);
				gs.info('Updating ADC Inventory... Please wait...');
				var device = responsecontent.response.data;
				var device_list = [];
				for(i = 0; i < device.length; i++){
					try {
						grinv.initialize();
						var device_name = device[i].name;
						device_list[i] = device_name.toString();
						var modules;
						var access;
						grinv.addQuery('name',device_name);
						grinv.query();
						if(grinv.hasNext()){
							while(grinv.next()){
							if(device[i].ip == ""){
								grinv.fqdn = device[i].fqdn;
							}
							else{
								grinv.ip_address = device[i].ip;
							}
							grinv.name = device[i].name;
							modules = device[i].module;
							grinv.modules = modules.toString();
							grinv.adc_vendor = device[i].vendor;
							grinv.add_device_into_appviewx = 'already_exists';
							grinv.version = device[i].version;
							grinv.status = device[i].status;
							access = device[i].access;
							grinv.username = access[0].userName;
							grinv.adc_password = access[0].password;
							grinv.update();
							}
						}
						else{
							if(device[i].ip == ""){
								grinv.fqdn = device[i].fqdn;
							}
							else{
								grinv.ip_address = device[i].ip;
							}
							grinv.name = device[i].name;
							modules = device[i].module;
							grinv.modules = modules.toString();
							grinv.adc_vendor = device[i].vendor;
							grinv.add_device_into_appviewx = 'already_exists';
							grinv.version = device[i].version;
							grinv.status = device[i].status;
							access = device[i].access;
							grinv.username = access[0].userName;
							grinv.adc_password = access[0].password;
							grinv.device_in_appviewx = "Yes";
							grinv.insert();
						}
						
					}
					catch (exe){
						gs.info(exe);
						}
				}
			}
			else {
				var responseMessage = response.getErrorMessage();
				responseBody = response.getBody();
				gs.info(responseBody);
			}
		}
		catch (exe) {
				gr.message = 'Update Inventory - Failed \n'+ 'Response - ' + exe;
				gr.insert();
				gs.info("Falied");
		}
	},
	_FwInventory: function() {
		try {
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_update_inventory';
				gr.application = 'AppViewX';
				gr.message = 'Getting List of Firewall Devices from AppViewX';
				gr.insert();
			var r = new sn_ws.RESTMessageV2();
			var url = gs.getProperty("x_avx_appviewx_aut.AppViewX URL");
			var username = gs.getProperty("x_avx_appviewx_aut.Username");
			var password = gs.getProperty("x_avx_appviewx_aut.Password");
			var payload = "{\"payload\":{}}";
			r.setHttpMethod("post");
			r.setRequestHeader("username", username);
			r.setRequestHeader("password", password);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(payload);
			r.setHttpTimeout(10000);
			r.setEndpoint(url+"/avxapi/firewall-get-devices-by-filter?gwkey=f000ca01&gwsource=web");
			var response = r.executeAsync();
			var status  = response.getStatusCode();
			if (status == 200) {
				var grinv = new GlideRecord('x_avx_appviewx_aut_firewall_devices');
				var responseBody = response.getBody();
				var responsecontent =  JSON.parse(responseBody);
				gs.info('Updating Firewall Inventory... Please wait...');
				var device = responsecontent.response.data;
				var device_list = [];
				for(i = 0; i < device.length; i++){
					if (device[i].category == "Firewall"){
					try {
						grinv.initialize();
						var device_name = device[i].name;
						device_list[i] = device_name.toString();
						var access;
						grinv.addQuery('name',device_name);
						grinv.query();
						if(grinv.hasNext()){
							while(grinv.next()){
							if(device[i].ip == ""){
								grinv.fqdn = device[i].fqdn;
							}
							else{
								grinv.ip_address = device[i].ip;
							}
							grinv.name = device[i].name;
							grinv.platform = device[i].platform;
							grinv.fw_vendor = device[i].vendor;
							grinv.is_device_present_in_appviewx = 'yes';
							grinv.version = device[i].version;
							grinv.status = device[i].status;
							access = device[i].access;
							grinv.username = access[0].userName;
							grinv.password = access[0].password;
							grinv.update();
							}
						}
						else{
							if(device[i].ip == ""){
								grinv.fqdn = device[i].fqdn;
							}
							else{
								grinv.ip_address = device[i].ip;
							}
							grinv.name = device[i].name;
							grinv.platform = device[i].platform;
							grinv.fw_vendor = device[i].vendor;
							grinv.is_device_present_in_appviewx = 'already_exists';
							grinv.version = device[i].version;
							grinv.status = device[i].status;
							access = device[i].access;
							grinv.username = access[0].userName;
							grinv.adc_password = access[0].password;
							grinv.device_in_appviewx = "Yes";
							grinv.insert();
						}
						
					}
					catch (exe){
						gs.info(exe);
						}
					}
				}
			}
			else {
				var responseMessage = response.getErrorMessage();
				responseBody = response.getBody();
				gs.info(responseBody);
			}
		}
		catch (exe) {
				gr.message = 'Update Inventory - Failed \n'+ 'Response - ' + exe;
				gr.insert();
				gs.info("Falied");
		}
	},	
	_OthersInventory: function() {
		try {
			var gr = new GlideRecord('x_avx_appviewx_aut_logs');
				gr.initialize();
				gr.level = 'Info';
				gr.script = 'appviewx_update_inventory';
				gr.application = 'AppViewX';
				gr.message = 'Getting List of Other Devices from AppViewX';
				gr.insert();
			var r = new sn_ws.RESTMessageV2();
			var url = gs.getProperty("x_avx_appviewx_aut.AppViewX URL");
			var username = gs.getProperty("x_avx_appviewx_aut.Username");
			var password = gs.getProperty("x_avx_appviewx_aut.Password");
			var payload = "{\"payload\":{}}";
			r.setHttpMethod("post");
			r.setRequestHeader("username", username);
			r.setRequestHeader("password", password);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(payload);
			r.setHttpTimeout(10000);
			r.setEndpoint(url+"/avxapi/others-get-devices-by-filter?gwkey=f000ca01&gwsource=web");
			response = r.executeAsync();
			status  = response.getStatusCode();
			if (status == 200) {
				grinv = new GlideRecord('x_avx_appviewx_aut_other_device');
				responseBody = response.getBody();
				responsecontent =  JSON.parse(responseBody);
				gs.info('Updating Other Devices Inventory... Please wait...');
				device = responsecontent.response.data;
				for(i = 0; i < device.length; i++){
					if (device[i].category == "Others"){
						try {
							grinv.initialize();
							var device_name = device[i].name;
							var access;
							grinv.addQuery('name',device_name);
							grinv.query();
							if(grinv.hasNext()){
								while(grinv.next()){
									grinv.ip_address_fqdn = device[i].ip;
									grinv.name = device[i].name;
									grinv.model = device[i].model;
									grinv.status = device[i].status;
									access = device[i].access;
									grinv.username = access[0].userName;
									grinv.password = access[0].password;
									grinv.update();
								}
							}
							else{
								grinv.ip_address_fqdn = device[i].ip;
								grinv.name = device[i].name;
								grinv.model = device[i].model;
								grinv.status = device[i].status;
								access = device[i].access;
								grinv.username = access[0].userName;
								grinv.password = access[0].password;
								grinv.insert();

							}
						}
					catch (exe){
						gs.info(exe);
						}
					}
				}
			}
			else {
				responseMessage = response.getErrorMessage();
				responseBody = response.getBody();
				gs.info(responseBody);
			}
		}
		catch (exe) {
				gr.message = 'Update Inventory - Failed \n'+ 'Response - ' + exe;
				gr.insert();
				gs.info("Falied");
		}
	},
	
	type: 'appviewx_update_inventory'
	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-01-07 03:19:06</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8ca608e91be568d061858480cd4bcb95</sys_id>
        <sys_mod_count>98</sys_mod_count>
        <sys_name>appviewx_update_inventory</sys_name>
        <sys_package display_value="AppViewX Automation+" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX Automation+">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_8ca608e91be568d061858480cd4bcb95</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-04-02 01:49:13</sys_updated_on>
    </sys_script_include>
</record_update>
